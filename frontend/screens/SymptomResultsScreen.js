// screens/SymptomResultsScreen.js
import React, { useCallback } from "react";
import { View, Text, TouchableOpacity, ScrollView, Share, SafeAreaView } from "react-native";
import { useNavigation, useRoute } from "@react-navigation/native";

const theme = {
  primary: "#2563eb",
  gray: "#6b7280",
  border: "#e5e7eb",
  bg: "#ffffff",
};

const human = (s = "") => s.replace(/_/g, " ");
const severityLabel = (s) => (s === "severe" ? "Severe" : s === "mild" ? "Mild" : "Moderate");

function TriageBanner({ triage }) {
  if (!triage?.level) return null;
  const lvl = triage.level;
  const bg = lvl === "Red" ? "#fee2e2" : lvl === "Amber" ? "#fef9c3" : "#dcfce7";
  const bd = lvl === "Red" ? "#ef4444" : lvl === "Amber" ? "#f59e0b" : "#16a34a";
  const icon = lvl === "Red" ? "üî¥" : lvl === "Amber" ? "üü†" : "üü¢";
  const reasons = Array.isArray(triage.reasons) ? triage.reasons.map(human).join(", ") : "";
  return (
    <View style={{ padding: 18, borderRadius: 12, backgroundColor: bg, borderWidth: 1.5, borderColor: bd }}>
      <Text style={{ fontWeight: "800", fontSize: 20 }}>
        {icon} Triage Level: {lvl}
      </Text>
      {!!reasons && <Text style={{ marginTop: 6, color: "#374151", fontSize: 16 }}>Reasons: {reasons}</Text>}
    </View>
  );
}

function NextSteps({ level }) {
  if (!level) return null;
  let advice = "Monitor symptoms and follow self-care advice.";
  if (level === "Amber") advice = "Book an appointment with a clinician within 24‚Äì48 hours.";
  if (level === "Red") advice = "Emergency signs present. Go to the ER immediately or call local emergency services.";
  return (
    <View style={{ marginTop: 14, padding: 16, borderRadius: 12, borderWidth: 1, borderColor: theme.border, backgroundColor: "#fff" }}>
      <Text style={{ fontWeight: "800", fontSize: 18 }}>What to do next</Text>
      <Text style={{ marginTop: 8, fontSize: 15, lineHeight: 22 }}>{advice}</Text>
    </View>
  );
}

export default function SymptomResultsScreen() {
  const navigation = useNavigation();
  const { params } = useRoute();
  const result = params?.result || {};
  const selected = params?.selected || [];
  const severityMap = params?.severityMap || {};

  const shareResults = useCallback(async () => {
    const triage = result?.triage?.level ? `Triage: ${result.triage.level}\n` : "";
    const top = Array.isArray(result?.top)
      ? result.top
          .map((d) => `‚Ä¢ ${human(d.name || "")}${typeof d.probability === "number" ? ` (${(d.probability * 100).toFixed(1)}%)` : ""}`)
          .join("\n")
      : "";
    const text =
      `HealthMate Check\n\n` +
      (selected.length ? `Symptoms: ${selected.map(human).join(", ")}\n` : "") +
      (triage || "") +
      (top ? `Possible conditions:\n${top}\n\n` : "") +
      `‚Äî Generated by HealthMate (not a medical diagnosis).`;
    try {
      await Share.share({ message: text });
    } catch {}
  }, [result, selected]);

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: theme.bg }}>
      {/* Header */}
      <View style={{ paddingHorizontal: 16, paddingVertical: 12, flexDirection: "row", justifyContent: "space-between", alignItems: "center", borderBottomWidth: 1, borderBottomColor: theme.border }}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Text style={{ fontSize: 16, color: theme.primary }}>Back</Text>
        </TouchableOpacity>
        <Text style={{ fontSize: 18, fontWeight: "800" }}>Results</Text>
        <TouchableOpacity onPress={shareResults}>
          <Text style={{ fontSize: 16, color: theme.primary }}>Share</Text>
        </TouchableOpacity>
      </View>

      <ScrollView contentContainerStyle={{ padding: 16, paddingBottom: 24 }}>
        {/* Triage */}
        <TriageBanner triage={result?.triage} />

        {/* Next steps */}
        <NextSteps level={result?.triage?.level} />

        {/* You reported */}
        {selected.length > 0 && (
          <View style={{ marginTop: 16, padding: 14, borderRadius: 12, borderWidth: 1, borderColor: theme.border, backgroundColor: "#fff" }}>
            <Text style={{ fontWeight: "800", fontSize: 18 }}>You reported</Text>
            <Text style={{ marginTop: 8, fontSize: 15, lineHeight: 22 }}>
              {selected.map((s) => `${human(s)} (${severityLabel(severityMap[s] || "moderate")})`).join(", ")}
            </Text>
          </View>
        )}

        {/* Conditions */}
        {Array.isArray(result?.top) && result.top.length > 0 && (
          <View style={{ marginTop: 16 }}>
            <Text style={{ fontWeight: "800", fontSize: 18 }}>Possible conditions</Text>
            {result.top.map((d, i) => (
              <View key={i} style={{ marginTop: 12, padding: 16, borderWidth: 1, borderColor: theme.border, borderRadius: 12, backgroundColor: "#fff" }}>
                <Text style={{ fontWeight: "800", fontSize: 17 }}>{human(d.name || "")}</Text>
                {typeof d.probability === "number" && (
                  <Text style={{ opacity: 0.75, marginTop: 4, fontSize: 14 }}>
                    Probability: {(d.probability * 100).toFixed(1)}%
                  </Text>
                )}
                {d.description ? <Text style={{ marginTop: 8, fontSize: 15, lineHeight: 22 }}>{d.description}</Text> : null}
                {!!d.precautions?.length && (
                  <View style={{ marginTop: 10 }}>
                    <Text style={{ fontWeight: "700", fontSize: 15 }}>Precautions</Text>
                    {d.precautions.map((p, idx) => (
                      <Text key={idx} style={{ marginTop: 4, fontSize: 14 }}>‚Ä¢ {p}</Text>
                    ))}
                  </View>
                )}
              </View>
            ))}
          </View>
        )}

        {/* Disclaimer */}
        <Text style={{ marginTop: 18, color: theme.gray, fontSize: 12 }}>
          ‚ö†Ô∏è This app is for educational purposes and not a substitute for medical advice. If symptoms are severe, call emergency services.
        </Text>

        {/* Actions */}
        <View style={{ marginTop: 16, flexDirection: "row", gap: 10 }}>
          <TouchableOpacity
            onPress={() => navigation.navigate("Checker", { reset: Date.now() })} // clears + scrolls to top
            style={{ flex: 1, backgroundColor: theme.primary, padding: 14, borderRadius: 12 }}
          >
            <Text style={{ color: "#fff", textAlign: "center", fontWeight: "700" }}>Start Over</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}
